Final Fish Game

Goals:
* Learn to understand version management via GitHub 	TICK
* Create working game	TICK
* Create saving		TICK
* Create leaderboard (see if online connectivity is possible for this)		TICK (except online connectivity)
* Give the game a more original theme than just plain old fish, maybe a short bit of flavour text as an intro also.
* Polish off the game and make it stable
* Distribute the game

Ideas for next stage:

Different levels of increasing difficulty (so when all the fish become unplayably large, you progress to the next stage)
Enemies with more complex movement (diagonal movement, curved movement, follow movement)
Player evolves - between stage changes, choose from preset descendants, which might have different movement controls and abilities.
Give player some health, so one hit isn't death. Enemies might have different attack damage.

Using the current player and enemy as a base that can be reskinned into different species with different sprites and with different stats and abilities is probably the way to go. 




Stages:

You start off as a space creature hatching from eggs in a nebula. The nebula plasma keeps you energized (so you don't need to worry about energy for the first few levels, allowing you to get to grips with other aspects of the game first) and has lots of food to help you grow. Other space creatures live in the nebula, but most are not really threatening, mainly larvae of other space creature species.

The first couple of levels take place here and are more tutorial-like than challenging. But after here you grow big enough to take vast journeys in deep space. Some story comes into play, such as that you spend thousands of years growing, and if depleted of food and energy you could exist in stasis for thousands of years more, drifting until you encounter your next source of photons and charged ions.

You don't play the vast, empty journeys. Instead, you play the moments of this creature's life that are filled with encounters. Encountering energy and food sources also means encountering other creatures of space. It's usually in those kinds of locations that gameplay levels will be centered around.




Possible differences between the species in terms of gameplay:

Note: Differences should be balanced. For every disadvantage one species has against the other, it must also get given an advantage. Since this is early game, differences shouldn't be over-complicated or introduce any completely new gameplay mechanics, that can be for later.

* Collision shape. Different collision shapes will give different opportunities and drawbacks. A wide shape is going to have more difficulty evading big enemies, while also being able to more easily capture a small target. A longer shape is more maneuverable between crowds of big enemies, but the player will need to be more precise in trying to capture a small enemy. This is already evident in the game currently, but it is a very small difference and more differences are needed to make the species feel different to play. This is fairly balanced.

* Speed. The advantage of speed is self-explanatory. Take note of the fact there is such a thing as too fast! Maybe try messing with different types of speed, acceleration, friction, drifting, "slippery" movement, etc. Perhaps faster might sometimes mean more difficult to control, to balance the advantages being fast gives. Ideally, what I want is movement to start awkward but managable, then become "better" or at least more specialised as the player evolves.

* Movement controls. Different control types. Some species might use 8-directional movement, some might only use 4. Some might use diagonal only, some square only. Some might use rotation for turning. Some might have more difficulty moving along the x-axis than the y-axis, or vice versa. Some might have different forms of propulsion than just a forward input, such as only being able to move forward in bursts or pulses.

Movement types will be defined in the physics process. Each species will have a movement type. Which movement type the physics process uses is determined by the player's movement type via if and else statements.  






Idea: Every species should have a help page that pops up when the player presses one of the F-keys. This will let the player see it's abilities and controls at a glance if they forget. Should pause the game.





For "Big":
	One of it's qualities is that it has a size offset, making it 0.1 bigger than normal. A large collision shape before resizing, and a starting sprite size offset could be the way to go, as I don't want enemy sizes to have this offset.
	






Note: The reason why species 3 spawns as the enemy in level 2 is because in level 2 the player is neither species 1 or 2, which is checked for when choosing the enemy to spawn as. Since it was neither, no new species was loaded, and it just used the last one in memory which was the player's one.






Future of the game:

There will be 3 tiers of enemies instead of just two. Currently there is smaller enemy = always gets eaten, or bigger enemy = always eats the player. In the middle I want to add a third tier, enemies you have to fight with because you are of comparable size. Even that middle tier exists as a range, so some enemies you fight will be smaller or bigger by slightly, affecting their stats. So you will only really be able to one-shot very small enemies, but only very large enemies will be able to one-shot you.








Run away:

	Going to need:
		velocity = sighted_player.position.direction_to(position) * 200 for the initial direction to run away to.
		A flee timer will start.
		The enemy will continue with the above velocity.
		Timer times out, causing the enemy to stop and turn 180.
		A check timer will start.
		If a player appears before the timer runs out, the flee sequence is repeated.
		If the check timer is timed out before a player shows up the enemy resumes it's coasting movement.
		



Bite:
	
	This is going to be the most basic, simple attack. It will not require any extra button presses. Later, possibly add a skill bar with more abilities such as:
		roar - scare away
		dash/speed boost
	which will be activated with a button press.
	
	But first, bite will be activated just on mouth contact with collision shape. It will also have a cooldown, so that it isn't activated continuously for the time the mouth is in contact with the opponent.
	
	Enemies will not be able to bite other enemies (yet). Only enemy and player can interact with each other.
	
	At first it will only be activated graphically and won't have an actual effect. Add health bar later.
	
	Pseudocode:
		
		On collision, if can-bite is true, set bite shape to visible and start cooldown timer and set can-bite to false. <- Damage calculation will go here later.
		
		Let bite shape play out it's animation, on end of animation set bite shape visible to false. 
		
		On cooldown timer timeout, set can-bite to true.
		


Next, health bar.

	Player health bar should be always visible in the top left corner of the screen.
	Enemy health shold only become visible when it isn't 100%, and under the Node2D that's used to keep it in place to the enemy and stop it from rotating.
	
	
	
	
Last worked on:
	Enemy health bar, now needs some logic





When the enemy strikes the player with it's mouth I want:
	* The enemy to hit once, and then for there to be a cooldown before it can hit again. 
	* It to be possible for the player to get swarmed by multiple enemies, so don't put the hit cooldown timer on the player, but the enemy.
	* If the player doesn't exit the enemy mouth and the enemy can hit again, I want that to be possible. So the on entered should only change the condition that the enemy can hit, but the actual hit logic should be under an if statement in process.
	
	The enemy should have a way to let the player know they have been hit. This could be achieved through the parent of both the player and the enemy. The enemy can probably do this by calling a function on the main script.



Damage calculation:
	Easiest way to do it would be to make physical attack a literal amount of hp taken off. This means, health would double as defence.
	This won't work for attacks that have their own damage modifier, but it will work for the basic bite attack.